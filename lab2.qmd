---
title: "lab2"
author: "Inez"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
execute:
  echo: true
  message: false
  warning: false
editor: visual
execute: 
  echo: true
  message: false
  warning: false
---

```{r setup}
#add in packages
library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```


# part 1: time series with Toolik lake data

## always look at your data

### read in the data

```{r}
toolik_df <- read_csv(here('data/toolik_daily.csv'))

### convert dataframe to time series

toolik_ts <- toolik_df %>% 
  mutate(date = lubridate::mdy(date)) %>% #convert from character into a new date format
  as_tsibble(key = NULL,  # turn this into a time series data frame
             index = date) # this is out time series variable
  
ggplot(toolik_ts, aes(x= date, y= daily_air_temp)) + 
  geom_line() +
  labs(x= 'date', y= 'mean daily air temp (celcius)\n at toolik station')
```


## we have a modification on filter when working with time series so now we
## use the filter_index() function to filter by date and time!

```{r}
### filter from dec 2010 to january 2011

toolik_ts %>% 
  filter_index("2018-01-01" ~ .) 

```


## we also have a variation on the group_by() function 
## we use index_by() to aggregate time series by increments

```{r}
toolik_month <- toolik_ts %>% 
  index_by(yr_mo = ~yearmonth(.)) %>% 
  summarize(monthly_mean_temp = mean(daily_air_temp, na.rm= TRUE)) %>% 
  ungroup()
```

Now lets plot that!

```{r}
ggplot(data= toolik_month, aes(x= yr_mo, y= monthly_mean_temp)) +
  geom_line()

ggplot(toolik_month, aes(x=year(yr_mo), y= monthly_mean_temp)) +
  geom_line() + facet_wrap( ~ month(yr_mo, label = TRUE)) +
  labs(x= 'year', y= 'annual mean air temp (c)',
       title= 'toolik station mea annual air temp',
       subtitle= '1988-2023',
       caption = '<put citation here>')
```

# Part 2: Time series wrangling anf forecasting!

Energy usage by sector, in trillions of BTUs

```{r}
energy_df <- read_csv(here('data', 'energy.csv'))
```

### analysis goals:

* examine patterns and trends in residential energy consumption over time
* predict what residential energy use patterns will look like over the next 5 year

```{r}
ggplot(energy_df, aes(x= year(yrmonth), y= energy_total)) +
  geom_line() +
  labs(color = 'sector')

energy_ts <- energy_df %>% 
  mutate(date = tsibble::yearmonth(yrmonth)) %>% 
  as_tsibble(index = date,
             key = sector)
```

```{r}
ggplot(data= energy_ts, aes(x= date, y= energy_total, color = sector)) +
  geom_line() +
    labs(y= "energy consumption by sectore \n (trillion BTUs)") +
  facet_wrap(~ sector, ncol = 1) 
```


* residential looks similar to comercial, with an overall upward trend, that eventually levels off and declines slightly in most recent years 
  * mechanism: as it gets colder you use more heat in the winter, and use more AC in the summer
  
* seasonality: summer and winter peaks, summer peaks seem to be getting larger over time

### season plot
```{r}
energy_ts %>% 
  filter(sector == 'residential') %>% 
  gg_season(y= energy_total, pal = hcl.colors(n=9)) + 
  theme_light() +
  labs(x= 'month', y='residential consumption(trillion BTU)')
```

### subseries plot
```{r}
energy_ts %>% 
  gg_subseries(y = energy_total)
```


# decomposition: will allow seasonality to shift overtime

```{r}
### find the STL decomposition (L= LOESS) acts like a moving average window, except its not weighting everything in that window equally, its weighing closer time points more than farther out points.

dcmp <- energy_ts %>% 
  filter(sector == 'residential') %>% 
  model(feasts:: STL(energy_total ~ season(period= '1 year') +
                    trend(window(49)))) 

components(dcmp) %>% 
  autoplot() #convert model types into relatable plots

```


```{r}
energy_ts %>% 
  filter(sector == 'residential') %>% 
  ACF(energy_total) %>% 
  autoplot()

#how much weight could i give to data 12 months ago?
```



# forecasting by Holt Winters exponential smoothing

Specify for each component, whether non ("N"), additive ("A") or multiplicative ("M")
```{r}
### create a model
energy_fit <- energy_ts %>% 
  filter(sector == 'residential') %>% 
  filter_index('2000-01' ~ .) %>% 
  model(ets = ETS(energy_total ~ season(method = "M") + trend(method= "A")))

energy_forecast <- energy_fit %>% 
  forecast(h = '5 years')

energy_forecast %>% 
  autoplot(energy_ts)
```


```{r}
energy_predicted <- energy_fit %>% 
  broom::augment()

ggplot(energy_predicted) +
  geom_line(aes(x= date, y= energy_total)) +
  geom_line(aes(x= date, y= .fitted), color = 'red', alpha= .7)

ggplot(energy_predicted, aes(x= .resid)) +
  geom_histogram()

```


























